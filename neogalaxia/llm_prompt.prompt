I want to build a web-based clone of Galaga using JavaScript. The game should be developed using Phaser.js (or another reliable framework if suggested), and it will be hosted as a static website on AWS S3. The primary target platform is desktop/laptop, but it should also include mobile touch controls.

Game Features & Mechanics
1. Player Controls
Desktop:
Arrow keys (or WASD) for movement.
Spacebar for shooting.
Escape (Esc) to pause.
Enter to confirm selections or restart the game.
Mobile:
A D-pad in the bottom-left corner for movement.
A "Fire" button on the bottom-right for shooting.
A mute button in the top-right to toggle audio.
2. Enemies & Behaviors
Enemy Types:
Basic Fighter: Moves in formation, occasionally fires at the player.
Fast Attacker: Zigzag movement, higher fire rate.
Boss Enemy: High health, multiple projectiles, advanced attack patterns.
Enemy Waves:
Enemies spawn in formation at the beginning of each level.
As the level increases, enemies become faster, shoot more frequently, and take more hits to destroy.
3. Collision Mechanics
Player bullets hit enemies → Enemy is destroyed, explosion animation plays, points awarded.
Enemy bullets hit player → Player loses health. If health reaches 0, the player loses a life.
Player collides with an enemy → Instant loss of one life.
Player collects a power-up → Gains a temporary ability (shield, double-shot, speed boost).
4. Scoring System
Basic enemy: 100 points
Fast attacker: 200 points
Boss enemy: 500 points
Power-up collected: 50 points
5. Level Progression
The game follows the original Galaga level system:
255 levels before the kill screen.
Increasing difficulty per level.
Boss enemies appear at certain stages.
6. Level 256 Kill Screen
When reaching Level 256:
The game simulates a graphical corruption bug (scrambled sprites, flickering UI, frozen gameplay).
Secret Bypass Code:
Input ⬆️⬆️⬇️⬇️⬅️➡️⬅️➡️ Enter within a few seconds.
If successful, display: "You have transcended the arcade! The game resets, but your legend continues..."
Bonus points are awarded, and the game restarts at Level 1 with a slight difficulty boost.
If unsuccessful, the game remains frozen, requiring a restart.
Assets & File Names
1. Sprites & Animations
Asset	Description	File Name
Player Ship	The player's spaceship	player_ship.png
Enemy Type 1	Basic enemy	enemy_1.png
Enemy Type 2	Fast-moving enemy	enemy_2.png
Boss Enemy	Strongest enemy	enemy_boss.png
Player Bullet	Player's projectile	player_bullet.png
Enemy Bullet	Enemy's projectile	enemy_bullet.png
Explosion	Destroyed enemy/player animation	explosion_spritesheet.png
Power-ups	Various power-up effects	powerup_shield.png, powerup_double.png, powerup_speed.png
Background	Starry space background	background.png
UI Elements	Score, lives, health bars	ui_score.png, ui_health.png, ui_lives.png
2. Sound & Audio
Sound Effect	Description	File Name
Player Fire	Sound when the player shoots	player_shoot.wav
Enemy Fire	Sound when an enemy shoots	enemy_shoot.wav
Explosion	Sound when a ship is destroyed	explosion.wav
Power-up Pickup	Sound when collecting power-ups	powerup_pickup.wav
Enemy Spawn	Sound when enemies enter the screen	enemy_spawn.wav
Background Music	Looped track for ambiance	bg_music.mp3
Game Over	Played when the player loses	game_over.wav
Mobile-Friendly Design
Use responsive scaling for UI elements.
Ensure touch controls do not obstruct gameplay.
Allow a fullscreen toggle for immersive play.
Optimize performance by:
Lowering texture resolution for mobile devices.
Using efficient rendering techniques.
Technical Implementation
1. Phaser.js Game Structure
Scene: Boot → Preloads assets.
Scene: Menu → Shows start menu, high scores.
Scene: Game → Handles the main game loop.
Scene: GameOver → Displays final score and restart prompt.
2. Physics & Collision Detection
Use Arcade Physics in Phaser.
Ensure that:
Enemy bullets correctly collide with the player.
Player bullets correctly collide with enemies.
3. Game Loop
Start Menu → Gameplay → Game Over sequence.
Waves of enemies spawn per level.
Level 256 bug triggers visual corruption.
Stretch Goals
(Optional features for later)

Multiplayer mode (local co-op or online).
Different ship designs for player customization.
Achievement system for special challenges.
Final Notes
Prioritize performance to keep gameplay smooth at 60 FPS.
Ensure cross-browser compatibility (Chrome, Firefox, Safari, Edge).
Make the game easy to deploy to an AWS S3 static website.
Expected Output
The LLM should generate:

A complete Phaser.js game setup with all the above features.
Properly structured JavaScript files for maintainability.
HTML & CSS for UI elements like score display and mobile controls.
A README file explaining deployment steps.