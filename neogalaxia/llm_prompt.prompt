# Prompt for Generating an Explosion Spritesheet

## Task Description
Create a properly sized and formatted explosion spritesheet for a 2D space shooter game. The spritesheet will be used to animate explosions when enemies or the player are destroyed.

## Technical Specifications
- **Total Spritesheet Dimensions**: Create a spritesheet with 16 frames arranged in a 4x4 grid
- **Individual Frame Size**: Each frame should be exactly 64x64 pixels
- **File Format**: PNG with transparency
- **Color Depth**: 32-bit (RGBA)
- **Total Resolution**: 256x256 pixels (4 frames × 64 pixels wide by 4 frames × 64 pixels tall)

## Visual Style Requirements
- **Style**: Pixel art style that matches a retro space shooter aesthetic
- **Color Palette**: Use bright oranges, yellows, and reds for the explosion with some white at the center
- **Animation Flow**: The explosion should start small, expand to its maximum size, and then fade out
- **Transparency**: The edges of the explosion should have partial transparency to blend with the background

## Frame-by-Frame Breakdown
1. **Frame 1 (0,0)**: Small initial burst/flash at the center (10-20% of frame size)
2. **Frame 2 (0,1)**: Expanding explosion (20-30% of frame size)
3. **Frame 3 (0,2)**: Further expansion (30-40% of frame size)
4. **Frame 4 (0,3)**: Continued expansion (40-50% of frame size)
5. **Frame 5 (1,0)**: Larger explosion with more detail (50-60% of frame size)
6. **Frame 6 (1,1)**: Approaching maximum size (60-70% of frame size)
7. **Frame 7 (1,2)**: Near maximum size (70-80% of frame size)
8. **Frame 8 (1,3)**: Maximum size explosion (80-90% of frame size)
9. **Frame 9 (2,0)**: Start of dissipation, still at maximum size but less dense
10. **Frame 10 (2,1)**: Continued dissipation, slightly smaller
11. **Frame 11 (2,2)**: Further dissipation, more transparent
12. **Frame 12 (2,3)**: Significantly dissipated, very transparent
13. **Frame 13 (3,0)**: Almost completely dissipated, mostly transparent
14. **Frame 14 (3,1)**: Final wisps of the explosion, barely visible
15. **Frame 15 (3,2)**: Last traces of smoke/particles
16. **Frame 16 (3,3)**: Empty frame or extremely faint residual particles

## Animation Sequence
The game will use a sequence of frames for the explosion animation. For a complete animation, use all 16 frames in order. For a shorter animation, you might use frames 0 through 12.

This creates a flickering effect as the explosion dissipates.

## Important Considerations
- Ensure each frame is centered within its 64x64 pixel boundary
- The explosion should not touch the edges of each frame to avoid clipping
- Use a consistent light source direction throughout all frames
- Include small particle effects that emanate from the center
- Add subtle smoke/debris elements that persist in the later frames

## Game Context
This spritesheet will be used in a retro-style space shooter game where the player controls a spaceship fighting against enemy ships. The explosion animation plays when enemies are destroyed or when the player's ship is hit.

## Technical Implementation Note
The animation will be implemented in Phaser 3 with the following code:
```javascript
// Create explosion animation at position
const explosion = scene.add.sprite(x, y, 'explosion_spritesheet_2');
explosion.setScale(1.0); // Scale may be adjusted based on the entity size
explosion.setOrigin(0.5, 0.5); // Center the explosion
explosion.play('explode');
explosion.once('animationcomplete', () => {
    explosion.destroy();
});

// The animation is defined in the BootScene with:
this.anims.create({
    key: 'explode',
    frames: this.anims.generateFrameNumbers('explosion_spritesheet_2', { 
        start: 0,
        end: 15
    }),
    frameRate: 24,
    repeat: 0
});
```
